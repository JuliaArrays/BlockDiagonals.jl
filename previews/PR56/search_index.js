var documenterSearchIndex = {"docs":
[{"location":"index.html#BlockDiagonals.jl","page":"Home","title":"BlockDiagonals.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Dev) (Image: CI) (Image: Codecov)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"BlockDiagonals.jl provides functionality for working efficiently with block diagonal matrices.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [BlockDiagonals]","category":"page"},{"location":"index.html#BlockDiagonals.BlockDiagonal","page":"Home","title":"BlockDiagonals.BlockDiagonal","text":"BlockDiagonal{T, V} <: AbstractMatrix{T}\nBlockDiagonal(blocks::V) -> BlockDiagonal{T,V}\n\nA matrix with matrices on the diagonal, and zeros off the diagonal.\n\ninfo: `V` type\nblocks::V should be a Tuple or AbstractVector where each component (each block) is <:AbstractMatrix{T} for some common element type T.\n\n\n\n\n\n","category":"type"},{"location":"index.html#BlockDiagonals.blocks-Tuple{BlockDiagonal}","page":"Home","title":"BlockDiagonals.blocks","text":"blocks(B::BlockDiagonal{T, V}) -> V\n\nReturn the on-diagonal blocks of B.\n\n\n\n\n\n","category":"method"},{"location":"index.html#BlockDiagonals.blocksize-Tuple{BlockDiagonal,Integer}","page":"Home","title":"BlockDiagonals.blocksize","text":"blocksize(B::BlockDiagonal, p::Integer, q::Integer=p) -> Tuple\n\nReturn the size of the p^th on-diagonal block. Optionally specify q to return the size of block p, q.\n\nExample\n\njulia> X = rand(2, 2); Y = rand(3, 3);\n\njulia> B = BlockDiagonal([X, Y]);\n\njulia> blocksize(B, 1)\n(2, 2)\n\njulia> blocksize(B, 1, 2)\n(2, 3)\n\nSee also blocksizes for accessing the size of all on-diagonal blocks easily.\n\n\n\n\n\n","category":"method"},{"location":"index.html#BlockDiagonals.blocksizes-Tuple{BlockDiagonal}","page":"Home","title":"BlockDiagonals.blocksizes","text":"blocksizes(B::BlockDiagonal{T, V}) -> V\n\nReturn the size of each on-diagonal block in order.\n\nExample\n\njulia> B = BlockDiagonal([rand(2, 2), rand(3, 3)]);\n\njulia> blocksizes(B)\n2-element Array{Tuple{Int64,Int64},1}:\n (2, 2)\n (3, 3)\n\nSee also blocksize for accessing the size of a single block efficiently.\n\n\n\n\n\n","category":"method"},{"location":"index.html#BlockDiagonals.eigen_blockwise-Tuple{BlockDiagonal,Vararg{Any,N} where N}","page":"Home","title":"BlockDiagonals.eigen_blockwise","text":"eigen_blockwise(B::BlockDiagonal, args...; kwargs...) -> values, vectors\n\nComputes the eigendecomposition for each block separately and keeps the block diagonal  structure in the matrix of eigenvectors. Hence any parameters given are applied to each eigendecomposition separately, but there is e.g. no global sorting of eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"index.html#BlockDiagonals.nblocks-Tuple{BlockDiagonal}","page":"Home","title":"BlockDiagonals.nblocks","text":"nblocks(B::BlockDiagonal[, dim])\n\nReturn the number of on-diagonal blocks.\n\nThe total number of blocks in the matrix is nblocks(B)^2.\n\n\n\n\n\n","category":"method"}]
}
